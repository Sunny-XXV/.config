"use strict";

// src/constants.ts
var EXTENSION_NAME = "V2EX_Polish";
var dataExpiryTime = 60 * 60 * 1e3;
var defaultOptions = {
  openInNewTab: false,
  autoCheckIn: {
    enabled: true
  },
  theme: {
    autoSwitch: false
  },
  reply: {
    preload: "off"
  },
  replyContent: {
    autoFold: true,
    hideReplyTime: true,
    hideRefName: true,
    showImgInPage: true
  },
  nestedReply: {
    display: "indent",
    multipleInsideOne: "nested"
  },
  userTag: {
    display: "inline"
  }
};

// src/utils.ts
var V2EX_ORIGIN = typeof window !== "undefined" && window.location.origin.includes("v2ex.com") ? window.location.origin : "https://www.v2ex.com" /* Origin */;
function isSameDay(timestamp1, timestamp2) {
  const date1 = new Date(timestamp1);
  const date2 = new Date(timestamp2);
  return date1.getFullYear() === date2.getFullYear() && date1.getMonth() === date2.getMonth() && date1.getDate() === date2.getDate();
}
function isObject(value) {
  return typeof value === "object" && value !== null && !Array.isArray(value);
}
function deepMerge(target, source) {
  const result = {};
  for (const key in target) {
    const targetProp = target[key];
    const sourceProp = source[key];
    if (isObject(targetProp) && isObject(sourceProp)) {
      result[key] = deepMerge(targetProp, sourceProp);
    } else if (Reflect.has(source, key)) {
      result[key] = sourceProp;
    } else {
      result[key] = targetProp;
    }
  }
  for (const key in source) {
    if (!Reflect.has(target, key)) {
      result[key] = source[key];
    }
  }
  return result;
}
function getRunEnv() {
  if (typeof chrome === "object" && typeof chrome.extension !== "undefined") {
    return "chrome";
  }
  if (typeof browser === "object" && typeof browser.extension !== "undefined") {
    return "web-ext";
  }
  return null;
}
function isValidSettings(settings) {
  return !!settings && typeof settings === "object" && "options" /* Options */ in settings;
}
var mark = `${EXTENSION_NAME}_settings`;
async function getV2P_Settings() {
  let noteId;
  {
    const res = await fetch(`${V2EX_ORIGIN}/notes`);
    const htmlText = await res.text();
    const $page = $(htmlText);
    const $note = $page.find('.note_item > .note_item_title > a[href^="/notes"]');
    $note.each((_, dom) => {
      const $dom = $(dom);
      if ($dom.text().startsWith(mark)) {
        const href = $dom.attr("href");
        if (typeof href === "string") {
          const id = href.split("/").at(2);
          noteId = id;
        }
        return false;
      }
    });
  }
  if (noteId) {
    const res = await fetch(`${V2EX_ORIGIN}/notes/edit/${noteId}`);
    const htmlText = await res.text();
    const $editor = $(htmlText).find("#note_content.note_editor");
    const value = $editor.val();
    if (typeof value === "string") {
      const syncSettings = JSON.parse(value.replace(mark, ""));
      if (isValidSettings(syncSettings)) {
        return { noteId, config: syncSettings };
      }
    }
  }
}
async function setV2P_Settings(storageSettings, signal) {
  const data = await getV2P_Settings();
  const updating = !!data;
  const formData = new FormData();
  const syncVersion = updating ? data.config["settings-sync" /* SyncInfo */].version + 1 : 1;
  const syncInfo = {
    version: syncVersion,
    lastSyncTime: Date.now()
  };
  formData.append(
    "content",
    mark + JSON.stringify({ ...storageSettings, ["settings-sync" /* SyncInfo */]: syncInfo })
  );
  formData.append("syntax", "0");
  if (updating) {
    const { noteId } = data;
    await fetch(`${V2EX_ORIGIN}/notes/edit/${noteId}`, {
      method: "POST",
      body: formData,
      signal
    });
  } else {
    formData.append("parent_id", "0");
    await fetch(`${V2EX_ORIGIN}/notes/new`, {
      method: "POST",
      body: formData,
      signal
    });
  }
  await setStorage("settings-sync" /* SyncInfo */, syncInfo);
  return syncInfo;
}
function getStorage(useCache = true) {
  return new Promise((resolve, reject) => {
    if (useCache) {
      if (window.__V2P_StorageCache) {
        resolve(window.__V2P_StorageCache);
      }
    }
    const runEnv = getRunEnv();
    if (!(runEnv === "chrome" || runEnv === "web-ext")) {
      const data = { ["options" /* Options */]: defaultOptions };
      if (typeof window !== "undefined") {
        window.__V2P_StorageCache = data;
      }
      resolve(data);
    } else {
      chrome.storage.sync.get().then((items) => {
        let data;
        const options = items["options" /* Options */];
        if (options) {
          data = { ...items, ["options" /* Options */]: deepMerge(defaultOptions, options) };
        } else {
          data = { ...items, ["options" /* Options */]: defaultOptions };
        }
        if (typeof window !== "undefined") {
          window.__V2P_StorageCache = data;
        }
        resolve(data);
      }).catch(() => {
        reject(new Error("\u83B7\u53D6\u6269\u5C55\u914D\u7F6E\u5931\u8D25\u3002"));
      });
    }
  });
}
var controller = null;
async function setStorage(storageKey, storageItem) {
  switch (storageKey) {
    case "options" /* Options */:
    case "api" /* API */:
    case "daily" /* Daily */:
    case "member-tag" /* MemberTag */:
    case "settings-sync" /* SyncInfo */:
    case "reading-list" /* ReadingList */:
      try {
        await chrome.storage.sync.set({ [storageKey]: storageItem });
        if (storageKey !== "api" /* API */ && storageKey !== "settings-sync" /* SyncInfo */ && typeof $ !== "undefined") {
          const settings = await getStorage(false);
          if (controller) {
            controller.abort();
          }
          controller = new AbortController();
          setV2P_Settings(settings, controller.signal);
        }
      } catch (err) {
        if (String(err).includes("QUOTA_BYTES_PER_ITEM quota exceeded")) {
          console.error(
            `${EXTENSION_NAME}: \u65E0\u6CD5\u8BBE\u7F6E ${storageKey}\uFF0C \u5355\u4E2A item \u4E0D\u80FD\u8D85\u51FA 8 KB\uFF0C\u8BE6\u60C5\u67E5\u770B\uFF1Ahttps://developer.chrome.com/docs/extensions/reference/storage/#storage-areas`
          );
        }
        throw new Error(`\u274C \u65E0\u6CD5\u8BBE\u7F6E\uFF1A${storageKey}`);
      }
      break;
    default:
      throw new Error(`\u672A\u77E5\u7684 storageKey\uFF1A ${storageKey}`);
  }
}

// src/background/daily-check-in.ts
var successText = "\u6BCF\u65E5\u767B\u5F55\u5956\u52B1\u5DF2\u9886\u53D6";
var handleCheckedIn = async (htmlText) => {
  const matchedArr = htmlText.match(/已连续登录 (\d+) 天/);
  let checkInDays;
  if (matchedArr) {
    const days = Number([...matchedArr].at(1));
    if (!Number.isNaN(days)) {
      checkInDays = days;
    }
  }
  const dailyInfo = { lastCheckInTime: Date.now(), checkInDays };
  await setStorage("daily" /* Daily */, dailyInfo);
};
async function checkIn() {
  if ((/* @__PURE__ */ new Date()).getHours() < 8) {
    return;
  }
  const storage = await getStorage(false);
  const dailyInfo = storage["daily" /* Daily */];
  const lastCheckInTime = dailyInfo?.lastCheckInTime;
  if (lastCheckInTime) {
    if (isSameDay(lastCheckInTime, Date.now())) {
      return;
    }
  }
  const targetTextFragment = "/mission/daily/redeem";
  const targetUrl = `${"https://www.v2ex.com" /* Origin */}${targetTextFragment}`;
  const res = await fetch(targetUrl, { headers: { Referer: "https://www.v2ex.com" /* Origin */ } });
  const htmlPlainText = await res.text();
  const startIndex = htmlPlainText.indexOf(targetTextFragment);
  if (startIndex !== -1) {
    const endIndex = htmlPlainText.indexOf("'", startIndex + targetTextFragment.length);
    if (endIndex !== -1) {
      const matchedString = htmlPlainText.slice(startIndex, endIndex);
      const checkInUrl = `${"https://www.v2ex.com" /* Origin */}${matchedString}`;
      const checkInResult = await fetch(checkInUrl);
      const text = await checkInResult.text();
      if (text.includes(successText)) {
        await handleCheckedIn(text);
      }
    }
  } else {
    if (htmlPlainText.includes(successText)) {
      await handleCheckedIn(htmlPlainText);
    }
  }
}

// src/background/main.ts
chrome.runtime.onMessage.addListener((message) => {
  if (Reflect.has(message, "colorSchemes" /* colorScheme */)) {
    void chrome.action.setIcon({
      path: message["colorSchemes" /* colorScheme */] === "dark" ? {
        16: "../images/icon-16-dark.png",
        32: "../images/icon-32-dark.png",
        48: "../images/icon-48-dark.png",
        128: "../images/icon-128-dark.png"
      } : {
        16: "../images/icon-16.png",
        32: "../images/icon-32.png",
        48: "../images/icon-48.png",
        128: "../images/icon-128.png"
      }
    });
  } else if (Reflect.has(message, "showOptions" /* showOptions */)) {
    if (message["showOptions" /* showOptions */] === true) {
      chrome.runtime.openOptionsPage();
    }
  }
});
chrome.contextMenus.removeAll(() => {
  const runEnv = getRunEnv();
  chrome.contextMenus.create({
    documentUrlPatterns: [
      "https://v2ex.com/*",
      "https://www.v2ex.com/*",
      "https://cn.v2ex.com/*",
      "https://jp.v2ex.com/*",
      "https://de.v2ex.com/*",
      "https://us.v2ex.com/*",
      "https://hk.v2ex.com/*",
      "https://global.v2ex.com/*",
      "https://fast.v2ex.com/*",
      "https://s.v2ex.com/*",
      "https://origin.v2ex.com/*",
      "https://staging.v2ex.com/*"
    ],
    contexts: ["page"],
    title: "V2EX Polish",
    visible: true,
    id: "menu" /* Root */
  });
  if (runEnv === "chrome" && "sidePanel" in chrome && typeof chrome.sidePanel.open === "function") {
    chrome.contextMenus.create({
      documentUrlPatterns: [
        "https://v2ex.com/*",
        "https://www.v2ex.com/*",
        "https://cn.v2ex.com/*",
        "https://jp.v2ex.com/*",
        "https://de.v2ex.com/*",
        "https://us.v2ex.com/*",
        "https://hk.v2ex.com/*",
        "https://global.v2ex.com/*",
        "https://fast.v2ex.com/*",
        "https://s.v2ex.com/*",
        "https://origin.v2ex.com/*",
        "https://staging.v2ex.com/*"
      ],
      contexts: ["page"],
      title: "\u9009\u9879\u8BBE\u7F6E",
      id: "menu/options" /* Options */,
      parentId: "menu" /* Root */
    });
  }
  chrome.contextMenus.create({
    documentUrlPatterns: [
      "https://v2ex.com/t/*",
      "https://www.v2ex.com/t/*",
      "https://cn.v2ex.com/t/*",
      "https://jp.v2ex.com/t/*",
      "https://de.v2ex.com/t/*",
      "https://us.v2ex.com/t/*",
      "https://hk.v2ex.com/t/*",
      "https://global.v2ex.com/t/*",
      "https://fast.v2ex.com/t/*",
      "https://s.v2ex.com/t/*",
      "https://origin.v2ex.com/t/*",
      "https://staging.v2ex.com/t/*"
    ],
    contexts: ["page"],
    title: "\u89E3\u6790\u672C\u9875 Base64",
    id: "menu/decode" /* Decode */,
    parentId: "menu" /* Root */
  });
  chrome.contextMenus.create({
    documentUrlPatterns: [
      "https://v2ex.com/t/*",
      "https://www.v2ex.com/t/*",
      "https://cn.v2ex.com/t/*",
      "https://jp.v2ex.com/t/*",
      "https://de.v2ex.com/t/*",
      "https://us.v2ex.com/t/*",
      "https://hk.v2ex.com/t/*",
      "https://global.v2ex.com/t/*",
      "https://fast.v2ex.com/t/*",
      "https://s.v2ex.com/t/*",
      "https://origin.v2ex.com/t/*",
      "https://staging.v2ex.com/t/*"
    ],
    contexts: ["page"],
    title: "\u6DFB\u52A0\u8FDB\u7A0D\u540E\u9605\u8BFB",
    id: "menu/reading" /* Reading */,
    parentId: "menu" /* Root */
  });
  chrome.contextMenus.onClicked.addListener((info, tab) => {
    if (tab?.id) {
      switch (info.menuItemId) {
        case "menu/options" /* Options */: {
          chrome.sidePanel.open({ tabId: tab.id });
          break;
        }
        case "menu/decode" /* Decode */: {
          void chrome.scripting.executeScript({
            target: { tabId: tab.id },
            files: ["scripts/decode-base64.min.js"]
          });
          break;
        }
        case "menu/reading" /* Reading */: {
          void chrome.scripting.executeScript({
            target: { tabId: tab.id },
            files: ["scripts/reading-list.min.js"]
          });
          break;
        }
      }
    }
  });
});
chrome.tabs.onUpdated.addListener((tabId, _, tab) => {
  if (!("sidePanel" in chrome)) {
    return;
  }
  void (async () => {
    if (!tab.url) {
      return;
    }
    const url = new URL(tab.url);
    if (url.origin === "https://www.v2ex.com" || url.origin === "https://v2ex.com" || url.origin === "https://cn.v2ex.com" || url.origin === "https://jp.v2ex.com" || url.origin === "https://de.v2ex.com" || url.origin === "https://us.v2ex.com" || url.origin === "https://hk.v2ex.com" || url.origin === "https://global.v2ex.com" || url.origin === "https://fast.v2ex.com" || url.origin === "https://s.v2ex.com" || url.origin === "https://origin.v2ex.com" || url.origin === "https://staging.v2ex.com") {
      await chrome.sidePanel.setOptions({
        tabId,
        path: "pages/options.html",
        enabled: true
      });
    } else {
      await chrome.sidePanel.setOptions({
        tabId,
        enabled: false
      });
    }
  })();
});
var checkInAlarmName = "dailyCheckIn";
chrome.alarms.get(checkInAlarmName, (alarm) => {
  if (typeof alarm === "undefined") {
    void chrome.alarms.create(checkInAlarmName, {
      periodInMinutes: 4.9
    });
  }
});
chrome.alarms.onAlarm.addListener((alarm) => {
  if (alarm.name === checkInAlarmName) {
    chrome.storage.sync.get().then((items) => {
      const options = items["options" /* Options */];
      if (options?.autoCheckIn.enabled) {
        void checkIn();
      }
    });
  }
});
